#!/usr/bin/env lua
--[[
Copyright 2018 Marcos Gutierrez <gmarcos87@gmail.com>
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-3.0
]]--

require "ubus"
local json = require 'luci.jsonc'
local utils = require('voucher.utils')

local function printJson (obj)
    print(json.stringify(obj))
end

local conn = ubus.connect()
if not conn then
    error("Failed to connect to ubus")
end


local function read_governance(msg)
    local path = '/etc/pirania/governance.json'
    printJson(utils.readJsonFile(path))
end

local function write_governance(msg)
    local path = '/etc/pirania/governance.json'
    local content = {}
    content.community = {
        currency = msg.communityCurrency,
        maintenance = msg.communityMaintenance,
        reserve = msg.communityReserve,
        payday = msg.communityPayday
    }
    content.member = {
        cost = msg.memberCost,
        vouchers = msg.memberVouchers
    }
    content.provider = {
        name = msg.providerName,
        cost = msg.providerCost,
        speed = msg.providerSpeed,
        payday = msg.providerPayday
    }
    printJson(utils.writeJsonFile(path, content))
end

local function get_clients(msg)
    local clients = {}
    local output = utils.unsafe_shell("for ip in $(ip n show | grep -v IP | awk '{print $1}' | sort -ut '|' -k 1,2); do grep $ip /tmp/dhcp.leases; done")
    for line in output:gmatch("[^\n]+") do
        local words = {}
        for w in line:gmatch("%S+") do if w ~= "" then table.insert(words, w) end end
        local mac = words[2]
        local ip = words[3]
        local station = words[4]
        table.insert(clients, { station=station, ip=ip, mac=mac })
    end
    printJson({ client });
end

local function read_content(msg)
    local path = '/etc/pirania/content.json'
    printJson(utils.readJsonFile(path))
end

local function write_content(msg)
    local path = '/etc/pirania/content.json'
    printJson(utils.writeJsonFile(path, msg))
end

local methods = {
    read_content = { no_params = 0 },
    get_clients = { no_params = 0 },
    write_content = {
        title = 'value',
        backgroundColor = 'value',
        welcome = 'value',
        body = 'value',
        logo = 'value',
        rules = 'value'
    },
    read_governance = { no_params = 0 },
    write_governance = {
        communityCurrency = 'value',
        communityMaintenance = 0,
        communityReserve = 0,
        communityPayday = 0,
        memberCost = 0,
        memberVouchers = 0,
        providerName = 'value',
        providerCost = 0,
        providerSpeed = 'value',
        providerPayday = 0
    },
}

if arg[1] == 'list' then
    printJson(methods)
end

if arg[1] == 'call' then
    local msg = io.read()
    msg = json.parse(msg)
    if      arg[2] == 'read_content'    then read_content(msg)
    elseif  arg[2] == 'get_clients'     then get_clients(msg)
    elseif  arg[2] == 'write_content'   then write_content(msg)
    elseif  arg[2] == 'read_governance' then read_governance(msg)
    elseif  arg[2] == 'write_governance' then write_governance(msg)
    else printJson({ error = "Method not found" })
    end
end
